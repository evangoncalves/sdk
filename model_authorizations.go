/*
senhasegura DSM API Reference

This is a senhasegura new API design

API version: 2.0.22
Contact: egoncalves@senhasegura.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the Authorizations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Authorizations{}

// Authorizations This model describes all Authorization properties
type Authorizations struct {
	// Authorization ID, generated by senhasegura
	Id int32 `json:"id"`
	// System which this authorization belongs to
	System string `json:"system"`
	// Environment which this authorization belongs to
	Environment string `json:"environment"`
	// Expiration date of an authorization (must be in YYYY-MM-DD HH:MM format)
	Expiration *time.Time `json:"expiration,omitempty"`
	// Whether secret sensitive data will be encrypted on responses
	Encryption bool `json:"encryption"`
	AdditionalProperties map[string]interface{}
}

type _Authorizations Authorizations

// NewAuthorizations instantiates a new Authorizations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizations(id int32, system string, environment string, encryption bool) *Authorizations {
	this := Authorizations{}
	this.Id = id
	this.System = system
	this.Environment = environment
	this.Encryption = encryption
	return &this
}

// NewAuthorizationsWithDefaults instantiates a new Authorizations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationsWithDefaults() *Authorizations {
	this := Authorizations{}
	return &this
}

// GetId returns the Id field value
func (o *Authorizations) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Authorizations) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Authorizations) SetId(v int32) {
	o.Id = v
}

// GetSystem returns the System field value
func (o *Authorizations) GetSystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.System
}

// GetSystemOk returns a tuple with the System field value
// and a boolean to check if the value has been set.
func (o *Authorizations) GetSystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.System, true
}

// SetSystem sets field value
func (o *Authorizations) SetSystem(v string) {
	o.System = v
}

// GetEnvironment returns the Environment field value
func (o *Authorizations) GetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *Authorizations) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *Authorizations) SetEnvironment(v string) {
	o.Environment = v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *Authorizations) GetExpiration() time.Time {
	if o == nil || isNil(o.Expiration) {
		var ret time.Time
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authorizations) GetExpirationOk() (*time.Time, bool) {
	if o == nil || isNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *Authorizations) HasExpiration() bool {
	if o != nil && !isNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given time.Time and assigns it to the Expiration field.
func (o *Authorizations) SetExpiration(v time.Time) {
	o.Expiration = &v
}

// GetEncryption returns the Encryption field value
func (o *Authorizations) GetEncryption() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value
// and a boolean to check if the value has been set.
func (o *Authorizations) GetEncryptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Encryption, true
}

// SetEncryption sets field value
func (o *Authorizations) SetEncryption(v bool) {
	o.Encryption = v
}

func (o Authorizations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Authorizations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["system"] = o.System
	toSerialize["environment"] = o.Environment
	if !isNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	toSerialize["encryption"] = o.Encryption

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Authorizations) UnmarshalJSON(bytes []byte) (err error) {
	varAuthorizations := _Authorizations{}

	if err = json.Unmarshal(bytes, &varAuthorizations); err == nil {
		*o = Authorizations(varAuthorizations)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "system")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "expiration")
		delete(additionalProperties, "encryption")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthorizations struct {
	value *Authorizations
	isSet bool
}

func (v NullableAuthorizations) Get() *Authorizations {
	return v.value
}

func (v *NullableAuthorizations) Set(val *Authorizations) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizations) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizations(val *Authorizations) *NullableAuthorizations {
	return &NullableAuthorizations{value: val, isSet: true}
}

func (v NullableAuthorizations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


