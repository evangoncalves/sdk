/*
senhasegura DSM API Reference

This is a senhasegura new API design

API version: 2.0.22
Contact: egoncalves@senhasegura.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SecretResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretResponse{}

// SecretResponse This model describes all Secret properties
type SecretResponse struct {
	Response Response `json:"response"`
	Secret Secret `json:"secret"`
	AdditionalProperties map[string]interface{}
}

type _SecretResponse SecretResponse

// NewSecretResponse instantiates a new SecretResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretResponse(response Response, secret Secret) *SecretResponse {
	this := SecretResponse{}
	this.Response = response
	this.Secret = secret
	return &this
}

// NewSecretResponseWithDefaults instantiates a new SecretResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretResponseWithDefaults() *SecretResponse {
	this := SecretResponse{}
	return &this
}

// GetResponse returns the Response field value
func (o *SecretResponse) GetResponse() Response {
	if o == nil {
		var ret Response
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetResponseOk() (*Response, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *SecretResponse) SetResponse(v Response) {
	o.Response = v
}

// GetSecret returns the Secret field value
func (o *SecretResponse) GetSecret() Secret {
	if o == nil {
		var ret Secret
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetSecretOk() (*Secret, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *SecretResponse) SetSecret(v Secret) {
	o.Secret = v
}

func (o SecretResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["response"] = o.Response
	toSerialize["secret"] = o.Secret

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecretResponse) UnmarshalJSON(bytes []byte) (err error) {
	varSecretResponse := _SecretResponse{}

	if err = json.Unmarshal(bytes, &varSecretResponse); err == nil {
		*o = SecretResponse(varSecretResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "response")
		delete(additionalProperties, "secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretResponse struct {
	value *SecretResponse
	isSet bool
}

func (v NullableSecretResponse) Get() *SecretResponse {
	return v.value
}

func (v *NullableSecretResponse) Set(val *SecretResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretResponse(val *SecretResponse) *NullableSecretResponse {
	return &NullableSecretResponse{value: val, isSet: true}
}

func (v NullableSecretResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


