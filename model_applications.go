/*
senhasegura DSM API Reference

This is a senhasegura new API design

API version: 2.0.22
Contact: egoncalves@senhasegura.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the Applications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Applications{}

// Applications This model describes all application properties
type Applications struct {
	// Application ID, generated by senhasegura
	Id int32 `json:"id"`
	// Name of the application
	Name string `json:"name"`
	// A descriptive text for the application
	Description *string `json:"description,omitempty"`
	// Authentication method used by this application's authorizations
	AuthMethod string `json:"auth_method"`
	// Line of business that best describe this application usage
	LineOfBusiness string `json:"line_of_business"`
	// Type of application
	Type string `json:"type"`
	// List of tags used for access segregation
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Applications Applications

// NewApplications instantiates a new Applications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplications(id int32, name string, authMethod string, lineOfBusiness string, type_ string) *Applications {
	this := Applications{}
	this.Id = id
	this.Name = name
	this.AuthMethod = authMethod
	this.LineOfBusiness = lineOfBusiness
	this.Type = type_
	return &this
}

// NewApplicationsWithDefaults instantiates a new Applications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationsWithDefaults() *Applications {
	this := Applications{}
	return &this
}

// GetId returns the Id field value
func (o *Applications) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Applications) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Applications) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Applications) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Applications) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Applications) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Applications) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Applications) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Applications) SetDescription(v string) {
	o.Description = &v
}

// GetAuthMethod returns the AuthMethod field value
func (o *Applications) GetAuthMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthMethod
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value
// and a boolean to check if the value has been set.
func (o *Applications) GetAuthMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthMethod, true
}

// SetAuthMethod sets field value
func (o *Applications) SetAuthMethod(v string) {
	o.AuthMethod = v
}

// GetLineOfBusiness returns the LineOfBusiness field value
func (o *Applications) GetLineOfBusiness() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LineOfBusiness
}

// GetLineOfBusinessOk returns a tuple with the LineOfBusiness field value
// and a boolean to check if the value has been set.
func (o *Applications) GetLineOfBusinessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineOfBusiness, true
}

// SetLineOfBusiness sets field value
func (o *Applications) SetLineOfBusiness(v string) {
	o.LineOfBusiness = v
}

// GetType returns the Type field value
func (o *Applications) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Applications) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Applications) SetType(v string) {
	o.Type = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Applications) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Applications) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Applications) SetTags(v []string) {
	o.Tags = v
}

func (o Applications) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Applications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["auth_method"] = o.AuthMethod
	toSerialize["line_of_business"] = o.LineOfBusiness
	toSerialize["type"] = o.Type
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Applications) UnmarshalJSON(bytes []byte) (err error) {
	varApplications := _Applications{}

	if err = json.Unmarshal(bytes, &varApplications); err == nil {
		*o = Applications(varApplications)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "auth_method")
		delete(additionalProperties, "line_of_business")
		delete(additionalProperties, "type")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplications struct {
	value *Applications
	isSet bool
}

func (v NullableApplications) Get() *Applications {
	return v.value
}

func (v *NullableApplications) Set(val *Applications) {
	v.value = val
	v.isSet = true
}

func (v NullableApplications) IsSet() bool {
	return v.isSet
}

func (v *NullableApplications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplications(val *Applications) *NullableApplications {
	return &NullableApplications{value: val, isSet: true}
}

func (v NullableApplications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


