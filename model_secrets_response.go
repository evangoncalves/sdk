/*
senhasegura DSM API Reference

This is a senhasegura new API design

API version: 2.0.22
Contact: egoncalves@senhasegura.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SecretsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretsResponse{}

// SecretsResponse This model describes all Secret properties
type SecretsResponse struct {
	Response Response `json:"response"`
	Secrets []Secrets `json:"secrets"`
	AdditionalProperties map[string]interface{}
}

type _SecretsResponse SecretsResponse

// NewSecretsResponse instantiates a new SecretsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretsResponse(response Response, secrets []Secrets) *SecretsResponse {
	this := SecretsResponse{}
	this.Response = response
	this.Secrets = secrets
	return &this
}

// NewSecretsResponseWithDefaults instantiates a new SecretsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretsResponseWithDefaults() *SecretsResponse {
	this := SecretsResponse{}
	return &this
}

// GetResponse returns the Response field value
func (o *SecretsResponse) GetResponse() Response {
	if o == nil {
		var ret Response
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *SecretsResponse) GetResponseOk() (*Response, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *SecretsResponse) SetResponse(v Response) {
	o.Response = v
}

// GetSecrets returns the Secrets field value
func (o *SecretsResponse) GetSecrets() []Secrets {
	if o == nil {
		var ret []Secrets
		return ret
	}

	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value
// and a boolean to check if the value has been set.
func (o *SecretsResponse) GetSecretsOk() ([]Secrets, bool) {
	if o == nil {
		return nil, false
	}
	return o.Secrets, true
}

// SetSecrets sets field value
func (o *SecretsResponse) SetSecrets(v []Secrets) {
	o.Secrets = v
}

func (o SecretsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["response"] = o.Response
	toSerialize["secrets"] = o.Secrets

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecretsResponse) UnmarshalJSON(bytes []byte) (err error) {
	varSecretsResponse := _SecretsResponse{}

	if err = json.Unmarshal(bytes, &varSecretsResponse); err == nil {
		*o = SecretsResponse(varSecretsResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "response")
		delete(additionalProperties, "secrets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretsResponse struct {
	value *SecretsResponse
	isSet bool
}

func (v NullableSecretsResponse) Get() *SecretsResponse {
	return v.value
}

func (v *NullableSecretsResponse) Set(val *SecretsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretsResponse(val *SecretsResponse) *NullableSecretsResponse {
	return &NullableSecretsResponse{value: val, isSet: true}
}

func (v NullableSecretsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


