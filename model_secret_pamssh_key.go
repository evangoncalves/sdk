/*
senhasegura DSM API Reference

This is a senhasegura new API design

API version: 2.0.22
Contact: egoncalves@senhasegura.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SecretPAMSSHKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretPAMSSHKey{}

// SecretPAMSSHKey This model describes all PAM Credential properties
type SecretPAMSSHKey struct {
	// PAM credential ID generated by senhasegura
	Id int32 `json:"id"`
	// PAM credential username
	Username string `json:"username"`
	Password *string `json:"password,omitempty"`
	// PAM credential password
	Comment string `json:"comment"`
	// PAM credential additional information, such as database instances
	Path string `json:"path"`
	Tags []string `json:"tags,omitempty"`
	PublicKey string `json:"public_key"`
	Device SecretPAMDevice `json:"device"`
	AdditionalProperties map[string]interface{}
}

type _SecretPAMSSHKey SecretPAMSSHKey

// NewSecretPAMSSHKey instantiates a new SecretPAMSSHKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretPAMSSHKey(id int32, username string, comment string, path string, publicKey string, device SecretPAMDevice) *SecretPAMSSHKey {
	this := SecretPAMSSHKey{}
	this.Id = id
	this.Username = username
	this.Comment = comment
	this.Path = path
	this.PublicKey = publicKey
	this.Device = device
	return &this
}

// NewSecretPAMSSHKeyWithDefaults instantiates a new SecretPAMSSHKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretPAMSSHKeyWithDefaults() *SecretPAMSSHKey {
	this := SecretPAMSSHKey{}
	return &this
}

// GetId returns the Id field value
func (o *SecretPAMSSHKey) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SecretPAMSSHKey) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SecretPAMSSHKey) SetId(v int32) {
	o.Id = v
}

// GetUsername returns the Username field value
func (o *SecretPAMSSHKey) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *SecretPAMSSHKey) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *SecretPAMSSHKey) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SecretPAMSSHKey) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPAMSSHKey) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SecretPAMSSHKey) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SecretPAMSSHKey) SetPassword(v string) {
	o.Password = &v
}

// GetComment returns the Comment field value
func (o *SecretPAMSSHKey) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *SecretPAMSSHKey) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *SecretPAMSSHKey) SetComment(v string) {
	o.Comment = v
}

// GetPath returns the Path field value
func (o *SecretPAMSSHKey) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *SecretPAMSSHKey) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *SecretPAMSSHKey) SetPath(v string) {
	o.Path = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SecretPAMSSHKey) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPAMSSHKey) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SecretPAMSSHKey) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SecretPAMSSHKey) SetTags(v []string) {
	o.Tags = v
}

// GetPublicKey returns the PublicKey field value
func (o *SecretPAMSSHKey) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *SecretPAMSSHKey) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *SecretPAMSSHKey) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetDevice returns the Device field value
func (o *SecretPAMSSHKey) GetDevice() SecretPAMDevice {
	if o == nil {
		var ret SecretPAMDevice
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *SecretPAMSSHKey) GetDeviceOk() (*SecretPAMDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *SecretPAMSSHKey) SetDevice(v SecretPAMDevice) {
	o.Device = v
}

func (o SecretPAMSSHKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretPAMSSHKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["username"] = o.Username
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["comment"] = o.Comment
	toSerialize["path"] = o.Path
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["public_key"] = o.PublicKey
	toSerialize["device"] = o.Device

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecretPAMSSHKey) UnmarshalJSON(bytes []byte) (err error) {
	varSecretPAMSSHKey := _SecretPAMSSHKey{}

	if err = json.Unmarshal(bytes, &varSecretPAMSSHKey); err == nil {
		*o = SecretPAMSSHKey(varSecretPAMSSHKey)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "path")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "device")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretPAMSSHKey struct {
	value *SecretPAMSSHKey
	isSet bool
}

func (v NullableSecretPAMSSHKey) Get() *SecretPAMSSHKey {
	return v.value
}

func (v *NullableSecretPAMSSHKey) Set(val *SecretPAMSSHKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretPAMSSHKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretPAMSSHKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretPAMSSHKey(val *SecretPAMSSHKey) *NullableSecretPAMSSHKey {
	return &NullableSecretPAMSSHKey{value: val, isSet: true}
}

func (v NullableSecretPAMSSHKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretPAMSSHKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


