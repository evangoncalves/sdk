/*
senhasegura DSM API Reference

This is a senhasegura new API design

API version: 2.0.22
Contact: egoncalves@senhasegura.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ApplicationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationsResponse{}

// ApplicationsResponse This model describes all application properties
type ApplicationsResponse struct {
	Response Response `json:"response"`
	Applications []Applications `json:"applications"`
	AdditionalProperties map[string]interface{}
}

type _ApplicationsResponse ApplicationsResponse

// NewApplicationsResponse instantiates a new ApplicationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationsResponse(response Response, applications []Applications) *ApplicationsResponse {
	this := ApplicationsResponse{}
	this.Response = response
	this.Applications = applications
	return &this
}

// NewApplicationsResponseWithDefaults instantiates a new ApplicationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationsResponseWithDefaults() *ApplicationsResponse {
	this := ApplicationsResponse{}
	return &this
}

// GetResponse returns the Response field value
func (o *ApplicationsResponse) GetResponse() Response {
	if o == nil {
		var ret Response
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *ApplicationsResponse) GetResponseOk() (*Response, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *ApplicationsResponse) SetResponse(v Response) {
	o.Response = v
}

// GetApplications returns the Applications field value
func (o *ApplicationsResponse) GetApplications() []Applications {
	if o == nil {
		var ret []Applications
		return ret
	}

	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value
// and a boolean to check if the value has been set.
func (o *ApplicationsResponse) GetApplicationsOk() ([]Applications, bool) {
	if o == nil {
		return nil, false
	}
	return o.Applications, true
}

// SetApplications sets field value
func (o *ApplicationsResponse) SetApplications(v []Applications) {
	o.Applications = v
}

func (o ApplicationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["response"] = o.Response
	toSerialize["applications"] = o.Applications

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplicationsResponse) UnmarshalJSON(bytes []byte) (err error) {
	varApplicationsResponse := _ApplicationsResponse{}

	if err = json.Unmarshal(bytes, &varApplicationsResponse); err == nil {
		*o = ApplicationsResponse(varApplicationsResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "response")
		delete(additionalProperties, "applications")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplicationsResponse struct {
	value *ApplicationsResponse
	isSet bool
}

func (v NullableApplicationsResponse) Get() *ApplicationsResponse {
	return v.value
}

func (v *NullableApplicationsResponse) Set(val *ApplicationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationsResponse(val *ApplicationsResponse) *NullableApplicationsResponse {
	return &NullableApplicationsResponse{value: val, isSet: true}
}

func (v NullableApplicationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


