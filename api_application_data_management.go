/*
senhasegura DSM API Reference

This is a senhasegura new API design

API version: 2.0.22
Contact: egoncalves@senhasegura.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ApplicationDataManagementApiService ApplicationDataManagementApi service
type ApplicationDataManagementApiService service

type ApiRegisterCloudProfileRequest struct {
	ctx context.Context
	ApiService *ApplicationDataManagementApiService
	applicationId int32
	applicationCloudCredentialProfileRequest *ApplicationCloudCredentialProfileRequest
}

func (r ApiRegisterCloudProfileRequest) ApplicationCloudCredentialProfileRequest(applicationCloudCredentialProfileRequest ApplicationCloudCredentialProfileRequest) ApiRegisterCloudProfileRequest {
	r.applicationCloudCredentialProfileRequest = &applicationCloudCredentialProfileRequest
	return r
}

func (r ApiRegisterCloudProfileRequest) Execute() (*ApplicationResponse, *http.Response, error) {
	return r.ApiService.RegisterCloudProfileExecute(r)
}

/*
RegisterCloudProfile Register Cloud Profiles on an Application

Register a dynamic provisioning cloud profile for an application on senhasegura DSM. Accessing applications not related to the requesting authorization requires system-wide permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Application ID generated by senhasegura
 @return ApiRegisterCloudProfileRequest
*/
func (a *ApplicationDataManagementApiService) RegisterCloudProfile(ctx context.Context, applicationId int32) ApiRegisterCloudProfileRequest {
	return ApiRegisterCloudProfileRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
	}
}

// Execute executes the request
//  @return ApplicationResponse
func (a *ApplicationDataManagementApiService) RegisterCloudProfileExecute(r ApiRegisterCloudProfileRequest) (*ApplicationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationDataManagementApiService.RegisterCloudProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iso/dsm/v2/applications/{application_id}/profiles/cloud"
	localVarPath = strings.Replace(localVarPath, "{"+"application_id"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.applicationCloudCredentialProfileRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegisterPAMProfileRequest struct {
	ctx context.Context
	ApiService *ApplicationDataManagementApiService
	applicationId int32
	applicationPAMCredentialProfileRequest *ApplicationPAMCredentialProfileRequest
}

func (r ApiRegisterPAMProfileRequest) ApplicationPAMCredentialProfileRequest(applicationPAMCredentialProfileRequest ApplicationPAMCredentialProfileRequest) ApiRegisterPAMProfileRequest {
	r.applicationPAMCredentialProfileRequest = &applicationPAMCredentialProfileRequest
	return r
}

func (r ApiRegisterPAMProfileRequest) Execute() (*ApplicationResponse, *http.Response, error) {
	return r.ApiService.RegisterPAMProfileExecute(r)
}

/*
RegisterPAMProfile Register PAM Profiles on an Application

Register a dynamic provision credential profile for an application on senhasegura DSM. Accessing applications not related to the requesting authorization requires system-wide permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Application ID generated by senhasegura
 @return ApiRegisterPAMProfileRequest
*/
func (a *ApplicationDataManagementApiService) RegisterPAMProfile(ctx context.Context, applicationId int32) ApiRegisterPAMProfileRequest {
	return ApiRegisterPAMProfileRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
	}
}

// Execute executes the request
//  @return ApplicationResponse
func (a *ApplicationDataManagementApiService) RegisterPAMProfileExecute(r ApiRegisterPAMProfileRequest) (*ApplicationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationDataManagementApiService.RegisterPAMProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iso/dsm/v2/applications/{application_id}/profiles/pam"
	localVarPath = strings.Replace(localVarPath, "{"+"application_id"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.applicationPAMCredentialProfileRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveCloudProfileRequest struct {
	ctx context.Context
	ApiService *ApplicationDataManagementApiService
	applicationId int32
	profileName string
}

func (r ApiRemoveCloudProfileRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.RemoveCloudProfileExecute(r)
}

/*
RemoveCloudProfile Remove a Cloud Profile from an Application

Delete/Disable a dynamic provisioning cloud profile from an application on senhasegura DSM. Accessing applications not related to the requesting authorization requires system-wide permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Application ID generated by senhasegura
 @param profileName The name of the profile registered on Dynamic Provisioning configuration.
 @return ApiRemoveCloudProfileRequest
*/
func (a *ApplicationDataManagementApiService) RemoveCloudProfile(ctx context.Context, applicationId int32, profileName string) ApiRemoveCloudProfileRequest {
	return ApiRemoveCloudProfileRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		profileName: profileName,
	}
}

// Execute executes the request
//  @return Response
func (a *ApplicationDataManagementApiService) RemoveCloudProfileExecute(r ApiRemoveCloudProfileRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationDataManagementApiService.RemoveCloudProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iso/dsm/v2/applications/{application_id}/profiles/cloud/{profile_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"application_id"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profile_name"+"}", url.PathEscape(parameterValueToString(r.profileName, "profileName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemovePAMProfileRequest struct {
	ctx context.Context
	ApiService *ApplicationDataManagementApiService
	applicationId int32
	profileName string
	profileTarget string
}

func (r ApiRemovePAMProfileRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.RemovePAMProfileExecute(r)
}

/*
RemovePAMProfile Remove a PAM Profile from an Application

Delete/Disable a dynamic provisioning credential profile from an application on senhasegura DSM. Accessing applications not related to the requesting authorization requires system-wide permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Application ID generated by senhasegura
 @param profileName The name of the profile registered on Dynamic Provisioning configuration.
 @param profileTarget The target of the profile registered on Dynamic Provisioning configuration.
 @return ApiRemovePAMProfileRequest
*/
func (a *ApplicationDataManagementApiService) RemovePAMProfile(ctx context.Context, applicationId int32, profileName string, profileTarget string) ApiRemovePAMProfileRequest {
	return ApiRemovePAMProfileRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		profileName: profileName,
		profileTarget: profileTarget,
	}
}

// Execute executes the request
//  @return Response
func (a *ApplicationDataManagementApiService) RemovePAMProfileExecute(r ApiRemovePAMProfileRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationDataManagementApiService.RemovePAMProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iso/dsm/v2/applications/{application_id}/profiles/pam/{profile_name}/{profile_target}"
	localVarPath = strings.Replace(localVarPath, "{"+"application_id"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profile_name"+"}", url.PathEscape(parameterValueToString(r.profileName, "profileName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profile_target"+"}", url.PathEscape(parameterValueToString(r.profileTarget, "profileTarget")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
